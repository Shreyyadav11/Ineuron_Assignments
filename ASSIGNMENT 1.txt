--INEURON ASSIGNMENT 1

--TASK 1

CREATE DATABASE INEURON_ASSIGNMENT;

USE INEURON_ASSIGNMENT;

CREATE OR REPLACE TABLE shopping_history (
  Product_name varchar(10),
  Quantity integer,
  unit_price integer
);

select * from shopping_history; --EMPTY TABLE

INSERT INTO shopping_history values
('milk',3,10),
('bread',7,3),
('bread',5,2);

SELECT * FROM shopping_history; --RETURN 3 ROWS

SELECT Product_name , SUM( Quantity * unit_price) AS MONEY_SPENT FROM shopping_history
GROUP BY 1
ORDER BY 1;

-----------------------------------------------------------------------------------------------



--TASK 2

--PART 1

CREATE OR REPLACE TABLE phone (
 name varchar(10) not null unique,
 phone_number integer not null unique
);

INSERT INTO phone (Name,Phone_number) VALUES
('Jack',1234),
('Lena',3333),
('Mark',9999),
('Anna',7582);
 
SELECT *  FROM phone;


CREATE OR REPLACE TABLE calls (
 id integer not null,
 caller integer not null,
 callee integer not null,
 duration integer not null
);
 
SELECT *  FROM calls;

INSERT INTO calls (id,caller,callee,duration) VALUES
(25,1234,7582,8),
(7,9999,7582,1),
(18,9999,3333,4),
(2,7582,3333,3),
(3,3333,1234,1),
(21,3333,1234,1);

SELECT * FROM calls;

SELECT P.NAME FROM
(SELECT CALLER, SUM(DURATION) AS TOTAL_DURATION  FROM
(SELECT CALLER,DURATION FROM CALLS
UNION ALL
SELECT CALLEE ,DURATION FROM CALLS)
GROUP BY 1
HAVING TOTAL_DURATION >= 10 ) C
LEFT OUTER JOIN PHONE P ON C.caller = P.phone_number
ORDER BY 1;

--PART 2

create or replace table phones_2(
name varchar(20) not null unique,
phone_number int not null unique
);

insert into phones_2 values
('john',6356),
('Addisson',4315),
('kate',8803),
('ginny',9831);

SELECT * FROM phones_2;


create or replace table calls_2(
id int not null unique,
caller int not null,
callee int not null,
duration int not null
);

Insert into calls_2 values
(65,8803,9831,7),
(100,9831,8803,3),
(105,4315,9831,18);

select * from calls_2; 

SELECT DISTINCT P.NAME FROM
(SELECT CALLER FROM
(SELECT CALLER FROM calls_2
UNION ALL
SELECT CALLEE FROM calls_2)) C
LEFT OUTER JOIN phones_2 P ON C.caller = P.phone_number
ORDER BY 1;

--------------------------------------------------------------------------------------------------


--TASK 3

--PART 1 
  
Create or replace table transactions(
Amount int not null,
Date Date not null
);

insert into transactions values
(-10,'2020-01-14'),
(-75,'2020-01-20'),
(-5,'2020-01-25'),
(-4,'2020-01-29'),
(2000,'2020-03-10'),
(-75,'2020-03-10'),
(-20,'2020-03-15'),
(40,'2020-03-15'),
(-50,'2020-03-17'),
(200,'2020-10-10'),
(-200,'2020-10-10'),
(1000,'2020-01-06');


select * from transactions;

WITH CTE AS
(SELECT SUM(AMOUNT) AS AMT, EXTRACT(MONTH FROM Date) AS MTH, 
 CASE 
  WHEN AMOUNT > 0 THEN 'CREDIT_CARD_PAYMT'
  ELSE 'INCOMING_TRANSFER' 
 END AS CREDIT_DEBIT,
COUNT(CREDIT_DEBIT) AS TRSF
FROM transactions
GROUP BY 2,3)
SELECT SUM(AMT)-(12-(SELECT COUNT(*) FROM CTE
WHERE  AMT <= -100 AND TRSF >=3))*5
FROM CTE;
                     


--PART 2

Create or replace table transactions_2(
Amount int not null,
Date Date not null
);

insert into transactions_2 values
(1,'2020-06-29'),
(35,'2020-02-20'),
(-50,'2020-02-03'),
(-1,'2020-02-26'),
(-200,'2020-08-01'),
(-44,'2020-02-07'),
(-5,'2020-02-25'),
(1,'2020-06-29'),
(1,'2020-06-29'),
(-100,'2020-12-29'),
(-100,'2020-12-30'),
(-100,'2020-12-31');

SELECT * FROM transactions_2;

WITH CTE AS
(SELECT SUM(AMOUNT) AS AMT, EXTRACT(MONTH FROM Date) AS MTH, 
 CASE 
  WHEN AMOUNT > 0 THEN 'CREDIT_CARD_PAYMT'
  ELSE 'INCOMING_TRANSFER' 
 END AS CREDIT_DEBIT,
COUNT(CREDIT_DEBIT) AS TRSF
FROM transactions_2
GROUP BY 2,3)
SELECT SUM(AMT)-(12-(SELECT COUNT(*) FROM CTE
WHERE  AMT <= -100 AND TRSF >=3))*5
FROM CTE;


--PART 3

Create or replace table transactions_3(
Amount int not null,
Date Date not null);

insert into transactions_3 values(6000,'2020-04-03'),
(5000,'2020-04-02'),
(4000,'2020-04-01'),
(3000,'2020-03-01'),
(2000,'2020-02-01'),
(1000,'2020-01-01');

SELECT * FROM transactions_3; 


WITH CTE AS
(SELECT SUM(AMOUNT) AS AMT, EXTRACT(MONTH FROM Date) AS MTH, 
 CASE 
  WHEN AMOUNT > 0 THEN 'CREDIT_CARD_PAYMT'
  ELSE 'INCOMING_TRANSFER' 
 END AS CREDIT_DEBIT,
COUNT(CREDIT_DEBIT) AS TRSF
FROM transactions_3
GROUP BY 2,3)
SELECT SUM(AMT)-(12-(SELECT COUNT(*) FROM CTE
WHERE  AMT <= -100 AND TRSF >=3))*5
FROM CTE;